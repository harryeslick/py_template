{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>    mkdocs.yml    # The configuration file.\n    docs/\n        index.md  # The documentation homepage.\n        # Other markdown pages, images and other files.\n        api_docs/\n            hello_world.md   # API docs are stored here\n        notebooks/\n            example.py  # ipynb notebooks are stored here for examples. \n</code></pre>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog,</p>"},{"location":"CHANGELOG/#000-2024-12-02","title":"[0.0.0] - 2024-12-02","text":""},{"location":"CHANGELOG/#fixed","title":"Fixed","text":""},{"location":"pre-commit-config/","title":"pre-commit-config.yaml","text":"<p>Pre-commit is a Python package which can be used to create 'git' hooks which scan can prior to checkins. The included configuration focuses on python actions which will help to prevent users from committing code which will fail during builds. In general, only formatting actions are automatiicaly performed. These include auto-formatting with <code>ruff</code>.</p>"},{"location":"pyproject/","title":"pypyroject.toml","text":"<p>The pyproject.toml is the main configuration file used for the Python project. It contains configurations for building, linting, testing, and publishing the Python package.</p> <p>The pyproject.toml replaces the \"setup.py\" package. When using 'flit' or 'poetry', only the pyproject.toml is required. This project currently uses 'flit', but in the future may also include a 'poetry' example. Both are considered viable options.</p> <p>When using setuptools, and setup.cfg is still required.</p>"},{"location":"api_docs/hello_world/","title":"Hello wrld","text":"<p>This is a Sample Python file.</p>"},{"location":"api_docs/hello_world/#py_project.hello_world.good_night","title":"<code>good_night()</code>","text":"<p>Doc String.</p> Source code in <code>src/py_project/hello_world.py</code> <pre><code>def good_night() -&gt; str:\n    \"\"\"Doc String.\"\"\"\n    print(\"good night\")\n    return \"string\"\n</code></pre>"},{"location":"api_docs/hello_world/#py_project.hello_world.hello_world","title":"<code>hello_world(i=0)</code>","text":"<p>Doc String.</p> Source code in <code>src/py_project/hello_world.py</code> <pre><code>def hello_world(i: int = 0) -&gt; str:\n    \"\"\"Doc String.\"\"\"\n    print(\"hello world\")\n    return f\"string-{i}\"\n</code></pre>"},{"location":"notebooks/example/","title":"1. Notebook example","text":"In\u00a0[\u00a0]: Copied! In\u00a0[1]: Copied! <pre>from py_project import hello_world\n</pre> from py_project import hello_world In\u00a0[2]: Copied! <pre>hello_world.hello_world()\n</pre> hello_world.hello_world() <pre>hello world\n</pre> Out[2]: <pre>'string-0'</pre> In\u00a0[3]: Copied! <pre>hello_world.hello_goodbye()\n</pre>  hello_world.hello_goodbye() <pre>hello world\ngood night\n</pre>"},{"location":"notebooks/example/#example-notebook","title":"Example Notebook\u00b6","text":"<p>This page is generated from an jupytext notebook <code>.py</code> file using  <code>%%</code> format.</p> <p>This defines a markdown cell <code> # %%  [markdown]</code></p> <p>This defines a code cell <code># %%</code></p>"}]}